#!/usr/bin/env bash

source "$( dirname "${BASH_SOURCE[0]}" )/../lib/defaults.sh"
source "$( dirname "${BASH_SOURCE[0]}" )/../lib/converters.sh"

declare command="$(basename "$0")"
declare subcommand="$1"

[ $# -gt 0 ] && shift

_set_power_setting(){
    local setting="$1"
    local battery_value="$2"
    local plugged_value="$3"

    if [ -n "${battery_value}" ] && [ -n "${plugged_value}" ]; then
        sudo pmset -b "${setting}" "${battery_value}"
        sudo pmset -c "${setting}" "${plugged_value}"
    else
        sudo pmset -g | grep "[[:space:]]${setting}[[:space:]]"
    fi
}

help(){
    cat<<__EOF__
    Usage:
      Every command that has two entries requires both the battery setting and the
      plugged setting (in that order).

      m power disksleeptime     x x                         # Time until disks sleep
      m power displaysleeptime  x x                         # Time until displays sleep
      m power hibernationdelay  x x                         # Time until system hibernates
      m power sleepdelay        x x                         # Time until system sleeps
      m power powernap          [ YES | NO ] [ YES | NO ]   # Whether power nap is enabled
      m power powerbuttonsleeps [ YES | NO ]                # Whether pressing the power button sleeps the system
      m power appnap            [ YES | NO ]                # Whether app nap is enabled
      m power restartonhang     [ YES | NO ]                # Whether to restart on system hang
      m power persistmemory     [ YES | NO ]                # Whether RAM contains working memory when sleeping ("NO" is more secure)
__EOF__
}

disksleeptime(){
    _set_power_setting "disksleep" "$1" "$2"

    echo "${command} ${subcommand}: $1 $2"
}

displaysleeptime(){
    _set_power_setting "displaysleep" "$1" "$2"

    echo "${command} ${subcommand}: $1 $2"
}

hibernationdelay(){
    if [[ "$1" == "0" ]] && [[ "$2" == "0" ]]; then
        _set_power_setting "standby" "0" "0"
    else
        _set_power_setting "standby" "1" "1"
    fi

    _set_power_setting "standbydelay" "$1" "$2"

    echo "${command} ${subcommand}: $1 $2"
}

sleepdelay(){
    _set_power_setting "sleep" "$1" "$2"

    echo "${command} ${subcommand}: $1 $2"
}

powernap(){
    battery_value="$(_mcli_convert_yes_no_to_integer "$1")"
    plugged_value="$(_mcli_convert_yes_no_to_integer "$2")"

    _set_power_setting "powernap" "${battery_value}" "${plugged_value}"

    echo "${command} ${subcommand}: ${battery_value} ${plugged_value}"
}

powerbuttonsleeps(){
    value="$(_mcli_defaults_yes_no_to_boolean "com.apple.loginwindow" \
                                              "PowerButtonSleepsSystem" \
                                              "$1")"

    echo "${command} ${subcommand}: ${value}"
}

appnap(){
    value="$(_mcli_defaults_yes_no_to_inverted_boolean "NSGlobalDomain" \
                                                       "NSAppSleepDisabled" \
                                                       "$1")"

    echo "${command} ${subcommand}: ${value}"
}

restartonhang(){
    value="$(_mcli_convert_yes_no_to_on_off "$1")"

    if [ -n "${value}" ]; then
      sudo /usr/sbin/systemsetup -setrestartfreeze "${value}"
    else
      sudo /usr/sbin/systemsetup -getrestartfreeze
    fi

    echo "${command} ${subcommand}: ${value}"
}

persistmemory(){
    local choice="$(_mcli_convert_yes_no_to_boolean "$1")"
    local value

    if [[ "${choice}" == "true" ]]; then
        value="3"
    else
        value="25"
    fi

    sudo pmset -a hibernatemode "${value}"

    echo "${command} ${subcommand}: ${value}"
}

case "${subcommand}" in
    help)
        help
        ;;
    disksleeptime)
        disksleeptime "$@"
        ;;
    displaysleeptime)
        displaysleeptime "$@"
        ;;
    hibernationdelay)
        hibernationdelay "$@"
        ;;
    sleepdelay)
        sleepdelay "$@"
        ;;
    powernap)
        powernap "$@"
        ;;
    powerbuttonsleeps)
        powerbuttonsleeps "$@"
        ;;
    appnap)
        appnap "$@"
        ;;
    restartonhang)
        restartonhang "$@"
        ;;
    persistmemory)
        persistmemory "$@"
        ;;
    *)
        help
        ;;
esac

# vim: ts=4 sw=4 softtabstop=4 expandtab
