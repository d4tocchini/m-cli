#!/usr/bin/env bash

source "$( dirname "${BASH_SOURCE[0]}" )/../lib/defaults.sh"
source "$( dirname "${BASH_SOURCE[0]}" )/../lib/converters.sh"

declare command="$(basename "$0")"
declare subcommand="$1"

[ $# -gt 0 ] && shift

help(){
    cat<<__EOF__
    Usage:
      m network ls                                     # list network interfaces
      m network location                               # get current location
      m network location ls                            # list locations
      m network location create XYZ                    # create a location
      m network location delete XYZ                    # delete a location
      m network location switch XYZ                    # switch location
      m network defaultusername "your name"            # the default username when connecting (don't specify a name to disable)
      m network dnsservers             9.9.9.9 8.8.8.8 # override all interfaces with manually specified DNS servers
      m network bonjouradvertisements  [ YES | NO ]    # whether to allow the computer to advertise its Bonjour services
      m network captiveportal          [ YES | NO ]    # whether to enable the network capture portal
      m network guestaccess            [ YES | NO ]    # whether to allow the guest user to access shared folders
      m network wakeonethernet         [ YES | NO ]    # whether to allow the computer to wake up if it receives a special network packet

      m network appleremoteevents      [ ON | OFF ]    # whether to allow Apple remote events
      m network internetsharing        [ ON | OFF ]    # whether to allow internet sharing
__EOF__

}

list_netservices(){
    sudo networksetup -listallhardwareports |
    while IFS= read -r line; do
        if echo "${line}" | grep -q -i "Device"; then
            device_name=$(echo "${line}" | awk '{print $2}')
            device_address="$(ipconfig getifaddr "${device_name}")"

            printf "%s\nIP: %s\n" "${line}" "${device_address}"
        else
            printf "%s\n" "${line}"
        fi
    done
}

defaultusername(){
    local username="$1"

    if [ -n "$1" ]; then
        defaults write com.apple.NetworkAuthorization UseDefaultName -bool true
        defaults write com.apple.NetworkAuthorization DefaultName "${username}"
    else
        defaults delete com.apple.NetworkAuthorization UseDefaultName
        defaults delete com.apple.NetworkAuthorization DefaultName
    fi

    defaults read com.apple.NetworkAuthorization UseDefaultName
    defaults read com.apple.NetworkAuthorization DefaultName
}

dnsservers(){
    current_location="$(sudo networksetup -getcurrentlocation)"

    sudo networksetup -listlocations |
    while read -r location; do
        sudo networksetup -switchtolocation "${location}" &> /dev/null

        sudo networksetup -listallnetworkservices |
        tail -n +2 |
        while read -r interface; do
            # shellcheck disable=SC2068
            sudo networksetup -setdnsservers "${interface}" $@
        done
    done

    sudo networksetup -switchtolocation "${current_location}" &> /dev/null
}

captiveportal(){
    value="$(_mcli_defaults_yes_no_to_boolean "/Library/Preferences/SystemConfiguration/com.apple.captive.control" \
                                              "Active" \
                                              "$1" \
                                              "sudo")"

    echo "${command} ${subcommand}: ${value}"
}

wakeonethernet(){
    choice="$(_mcli_convert_yes_no_to_integer "$1")"

    if [ -n "${choice}" ]; then
      sudo pmset -a womp "${choice}"
    fi

    sudo pmset -g | grep womp
}

guestaccess(){
    value="$(_mcli_defaults_yes_no_to_boolean "/Library/Preferences/com.apple.AppleFileServer" \
                                              "guestAccess" \
                                              "$1" \
                                              "sudo")"
    value="$(_mcli_defaults_yes_no_to_boolean "/Library/Preferences/com.apple.smb.server" \
                                              "AllowGuestAccess" \
                                              "$1" \
                                              "sudo")"

    echo "${command} ${subcommand}: ${value}"
}

bonjouradvertisements(){
    choice="$(_mcli_convert_yes_no_to_inverted_boolean "$1")"
    value="$(_mcli_defaults_yes_no_to_boolean "/System/Library/LaunchDaemons/com.apple.mDNSResponder" \
                                              "NoMulticastAdvertisements" \
                                              "${choice}" \
                                              "sudo")"

    _mcli_convert_yes_no_to_array_item "${choice}" \
                                       "/System/Library/LaunchDaemons/com.apple.mDNSResponder.plist" \
                                       "ProgramArguments" \
                                       "-NoMulticastAdvertisements" \
                                       "sudo"

    echo "${command} ${subcommand}: $(_mcli_convert_yes_no_to_inverted_boolean "${value}")"
}

location(){
    case $1 in
        create)
            [ -z "$2" ] && help && exit 1;
            networksetup -createlocation "$2"
            ;;
        delete|rm)
            [ -z "$2" ] && help && exit 1;
            networksetup -deletelocation "$2"
            ;;
        switch)
            [ -z "$2" ] && help && exit 1;
            networksetup -switchtolocation "$2"
            ;;
        list|ls)
            echo "Locations: "
            networksetup -listlocations
            ;;
        *)
            echo "Current location: $(networksetup -getcurrentlocation)"
            ;;
    esac
}

appleremoteevents(){
    choice="$(_mcli_convert_yes_no_to_on_off "$1")"

    sudo systemsetup -setremoteappleevents "${choice}"
}

internetsharing(){
    choice="$(_mcli_convert_yes_no_to_on_off "$1")"

    sudo systemsetup -setremoteappleevents "${choice}"
}

case "${subcommand}" in
    help)
        help
        ;;
    ls|list)
        list_netservices
        ;;
    captiveportal)
        captiveportal "$@"
        ;;
    location)
        location "$@"
        ;;
    defaultusername)
        defaultusername "$@"
        ;;
    dnsservers)
        dnsservers "$@"
        ;;
    wakeonethernet)
        wakeonethernet "$@"
        ;;
    guestaccess)
        guestaccess "$@"
        ;;
    appleremoteevents)
        appleremoteevents "$@"
        ;;
    internetsharing)
        internetsharing "$@"
        ;;
    bonjouradvertisements)
        bonjouradvertisements "$@"
        ;;
    *)
        help
        ;;
esac

# vim: ts=4 sw=4 softtabstop=4 expandtab
