#!/usr/bin/env bash

source "$( dirname "${BASH_SOURCE[0]}" )/../lib/defaults.sh"
source "$( dirname "${BASH_SOURCE[0]}" )/../lib/converters.sh"

declare login_pref_path="/Library/Preferences/com.apple.loginwindow"

declare command="$(basename "$0")"
declare subcommand="$1"

[ $# -gt 0 ] && shift

help(){
    cat<<__EOF__
    Usage:
      m user ls                                              # list users
      m user info demouser                                   # display user information

      m user create                                          # create a user, it will ask you the below information
                                                                  Username:
                                                                  Full name:
                                                                  Shell [/bin/bash]:
                                                                  Password:

      m user delete demouser                                 # delete user
      m user autologin                [ disable | username ] # who to autologin as or whether to disable autologin
      m user fastswitching            [ YES | NO ]           # whether to enable fast user switching
      m user guest                    [ YES | NO ]           # whether to enable the guest user
      m user showsecure               [ YES | NO ]           # whether to show secure users on the login screen (such as root)
      m user loginpoweroptions        [ YES | NO ]           # whether to show power options during login
      m user loginattemptsbeforehint  x                      # the number of failed attempts before hint is shown
      m user loginmessage             "Your message"         # the custom text to show on the login screen (enter nothing to remove message)
__EOF__
}

search_byname(){
    # dscl . -search always returns 0
    # dscl . -search /Users name "${1}" > /dev/null 2>&1
    dscl . -list /Users | grep -i "${1}" >/dev/null 2>&1
}

user_ls(){
    dscl . -list /Users uid
}


user_info(){
    [ -z "$1" ] && help && exit 1

    dscl . -read "/Users/$1"
}

remove_user_from_group(){
    [ -z "$1" -o -z "$2" ] && help && exit 1
    sudo dscl . -delete /Groups/$2 GroupMembership $1
}

groups_user_belongs(){
    [ -z "$1" ] && help && exit 1
    sudo dscl . -list /groups GroupMembership | grep -i "${1}" | awk '{print $1}'
}

user_create(){
    LAST_ID=$(dscl . -list /Users UniqueID | awk '{print $2}' | sort -n | tail -1)
    LAST_ID=$(expr $LAST_ID + 1)

    read -r -p "Username: " _USERNAME
    read -r -p "Full name: " _FULLNAME
    read -r -p "Shell [/bin/bash]: " _USERSHELL
    _USERSHELL=${_USERSHELL:-/bin/bash}
    read -s -r -p "Password: " _PASSWORD

    echo "\n"
    [ -z "${_USERNAME}" ] && echo "Enter a username" && exit 1
    [ -z "${_FULLNAME}" ] && echo "Enter a real name" && exit 1
    [ -z "${_PASSWORD}" ] && echo "Enter a password" && exit 1

    echo "Creating user..."
    sudo dscl . -create /Users/${_USERNAME}
    sudo dscl . -create /Users/${_USERNAME} UserShell ${_USERSHELL}
    sudo dscl . -create /Users/${_USERNAME} RealName "${_FULLNAME}"
    sudo dscl . -create /Users/${_USERNAME} UniqueID "${LAST_ID}"
    # staff group by default
    sudo dscl . -create /Users/${_USERNAME} PrimaryGroupID 20
    sudo dscl . -create /Users/${_USERNAME} NFSHomeDirectory /Users/${_USERNAME}
    # set password
    sudo dscl . -passwd /Users/${_USERNAME} ${_PASSWORD}

    # Create the home directory
    sudo createhomedir -c -u ${_USERNAME} 2>/dev/null

    echo "Created user ${_USERNAME} - ${_FULLNAME} (${LAST_ID})"
}


user_delete(){
    [ -z "$1" ] && help && exit
    if search_byname "$1"; then
        sudo dscl . -delete "/Users/${1}"
        sudo rm -rf /Users/${1} 2>/dev/null

        for group in $(groups_user_belongs $1); do
            remove_user_from_group $1 $group
        done

        echo "\"${1}\" was deleted!"
    else
        echo "\"${1}\" not found, try other one"
    fi
}

autologin(){
    local username="$(if [[ "$1" != "disable" ]]; then echo "$1"; fi)"

    if [ -z "${username}" ]; then
        value="$(_mcli_defaults_delete "${login_pref_path}" "autoLoginUser" "global" "sudo")"
        sudo rm -f /etc/kcpassword
    else
        value="$(_mcli_defaults_string "${login_pref_path}" "autoLoginUser" "$username")"
    fi

    echo "${command} ${subcommand}: ${value}"
}

fastswitching(){
    value="$(_mcli_defaults_yes_no_to_boolean "NSGlobalDomain" \
                                              "MultipleSessionEnabled" \
                                              "$1")"

    sudo perl -pi -e "s-no_warn group=admin,-no_warn group=-g" /etc/pam.d/screensaver

    echo "${command} ${subcommand}: ${value}"
}

guest(){
    value="$(_mcli_defaults_yes_no_to_integer "${login_pref_path}" \
                                              "GuestEnabled" \
                                              "$1" \
                                              "global" \
                                              "sudo")"

    value="$(_mcli_defaults_yes_no_to_integer "/Library/Preferences/SystemConfiguration/com.apple.smb.server" \
                                              "AllowGuestAccess" \
                                              "$1" \
                                              "global" \
                                              "sudo")"

    echo "${command} ${subcommand}: ${value}"
}

showsecure(){
    value="$(_mcli_defaults_yes_no_to_inverted_boolean "${login_pref_path}" \
                                                       "Hide500Users" \
                                                       "$1" \
                                                       "global" \
                                                       "sudo")"

    echo "${command} ${subcommand}: ${value}"
}

loginpoweroptions(){
    value="$(_mcli_defaults_yes_no_to_inverted_boolean "${login_pref_path}" \
                                                       "PowerOffDisabled" \
                                                       "$1" \
                                                       "global" \
                                                       "sudo")"

    echo "${command} ${subcommand}: ${value}"
}

loginattemptsbeforehint(){
    value="$(_mcli_defaults_number "${login_pref_path}" \
                                   "RetriesUntilHint" \
                                   "$1" \
                                   "global" \
                                   "sudo")"

    echo "${command} ${subcommand}: ${value}"
}

loginmessage(){
    local message="$1"
    local kextdir="/System/Library/Extensions"
    local eficachedir="/System/Library/Caches/com.apple.corestorage/EFILoginLocalizations"

    if [ -n "${message}" ]; then
        sudo defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText -string "$message"
    else
        sudo sh -c "defaults delete /Library/Preferences/com.apple.loginwindow LoginwindowText 2> /dev/null"
    fi

    # The CoreStorage kext cache needs to be updated so the recovery message
    # is displayed on the FDE pre-boot screen.
    #
    # The CS cache can be updated directly by touching $eficachedir, if it exists.
    # Otherwise you will need to touch $kextdir to generate it.

    # Refresh system kext cache
    sudo mkdir -p "${kextdir}" 2> /dev/null

    # Refresh CoreStorage EFI Cache
    sudo mkdir -p "${eficachedir}" 2> /dev/null

    sudo touch "${eficachedir}"
}

case "${subcommand}" in
    help)
        help
        ;;
    list|ls)
        user_ls
        ;;
    info)
        user_info "$@"
        ;;
    create)
        user_create
        ;;
    delete)
        user_delete "$@"
        ;;
    autologin)
        autologin "$@"
        ;;
    fastswitching)
        fastswitching "$@"
        ;;
    guest)
        guest "$@"
        ;;
    showsecure)
        showsecure "$@"
        ;;
    loginpoweroptions)
        loginpoweroptions "$@"
        ;;
    loginattemptsbeforehint)
        loginattemptsbeforehint "$@"
        ;;
    loginmessage)
        loginmessage "$@"
        ;;
    *)
        help
        ;;
esac

# vim: ts=4 sw=4 softtabstop=4 expandtab
